Title: Plugin Workflow

----

Description: Set up multiple plugins with PHPUnit testing under a single Kirby installation.

----

Text:

## Introduction

In this guide, we'll use (link: https://phpunit.de/ text: PHPUnit) to set up an optimized testing workflow for Kirby plugins with the ability to have custom blueprints and content for each plugin under a single Kirby installation.

## Prerequisites

### PHPUnit

If you don't have PHPUnit, follow the instructions on (link: https://phpunit.de/ text: their site) to install it or if you use XAMPP, check (link: https://medium.com/oblik-studio/how-to-set-up-phpunit-on-xampp-and-windows-dad92dc11335 text: this article).

### Kirby

We'll need a Kirby installation too. It can house all of our plugins and since each one will have its own content (although it can use the installation's), we'll use the (link: https://github.com/getkirby/plainkit text: plainkit template) which is very minimal:

```bash
cd C:/xampp\htdocs/
git clone https://github.com/getkirby/plainkit kirbyplugins
```

## Setup

### Installing a Plugin

Create and enter in the plugins folder where Kirby expects plugins:

```bash
cd kirbyplugins/site
mkdir plugins
cd plugins
```

Then, put your plugin there by adding it as a submodule. In this example, we'll use the (link: https://github.com/OblikStudio/kirby-link-field text: link-field) plugin:

```bash
git submodule add https://github.com/OblikStudio/kirby-link-field link-field
```

Let's check if we successfully added the plugin by opening the the site blueprint and adding a new field with type `link`:

```yaml "kirbyplugins/site/blueprints/site.yml"
title: Site
preset: pages
unlisted: true
fields:
  foo:
    type: link
```

Then, open the panel and you should see something like this:

(picture: plugin.gif)

### Bootstrapping Kirby

Open `kirbyplugins/index.php` and you'll see:

```php
require 'kirby/bootstrap.php';

echo (new Kirby)->render();
```

This is the root script that handles every Kirby request. It requires another script, `bootstrap.php`, that loads all Kirby-related stuff and then creates an instance of the Kirby object that is used to render the page.

We need to do the same thing within our plugin but provide some configuration to the Kirby object and instead of rendering, we'll simply run some tests.

#### Folder Structure

In the plugin folder, create the following directory structure:

```filesystem
link-field/
  tests/
    kirby/
    suites/
    bootstrap.php
```

The `kirby` folder will contain the plugin's custom blueprints and content, `suites` will contain our tests, and `bootstrap.php` will be the script that sets up Kirby.

#### The Bootstrap Script

Open `bootstrap.php` and add:

```php
<?php
require_once __DIR__ . '/../../../../kirby/bootstrap.php';

new Kirby();
echo site()->title();
```

This simply requires the same script that Kirby normally requires and echoes the site title so we can see if it works. Run the script with the PHP CLI and you should see `Site Title` in the output:

```bash
cd link-field/tests/
php bootstrap.php
Site Title 
```

#### Custom Kirby Components

Copy the installed `kirbyplugins/content` and `kirbyplugins/site/blueprints` and put them in the plugin's `tests/kirby` folder. You should have a similar directory structure:

```filesystem
link-field/
  tests/
    kirby/
      blueprints/
        pages/
        site.yml
      content/
        error/
        home/
        site.txt
    suites/
    bootstrap.php
```

Then, modify the plugin's bootstrap script so that Kirby is set up to use those folders instead:

```php "link-field/tests/bootstrap.php"
new Kirby([
  'roots' => [
    'content' => __DIR__ . '/kirby/content',
    'blueprints' => __DIR__ . '/kirby/blueprints'
  ]
]);

echo site()->title();
```

To test that, open `tests/kirby/content/site.txt` and change:

```
Title: Site Title
```

...to:

```
Title: Plugin Title
```

Run the bootstrap script again and you should see the new title:

```
php bootstrap.php
Plugin Title
```

If everything was successful, remove the `echo` line from the bootstrap script.

## Tests

You should check the (link: https://phpunit.de/getting-started/phpunit-8.html text: PHPUnit documentation) to learn how to write tests. We're going to do the same thing here, basically. Create `tests/suites/MyTest.php` and put the following inside:

```php
<?php
use PHPUnit\Framework\TestCase;

final class PluginTest extends TestCase {
  public function testTitleValue () {
    $this->assertEquals(site()->title()->value(), 'Plugin Title');
  }
}
```

To run the test, we use the `phpunit` command, supply the plugin's bootstrap script, and specify the folder containing the tests:

```bash
phpunit --bootstrap ./bootstrap.php --testdox ./suites
```

You should see a similar output:

```
PHPUnit 8.2.3 by Sebastian Bergmann and contributors.

Plugin
 âœ” Title value

Time: 246 ms, Memory: 10.00 MB

OK (1 test, 1 assertion)
```

All that's left now is adding more tests!

---

## Extras

### Autoloading

If your plugin uses classes, you'd normally (link: https://www.php.net/manual/en/language.oop5.autoload.php text: autoload) them before running the tests. However, you wouldn't need that in this case because you probably include the classes in your plugin's `index.php` file already. When testing, the plugin's `bootstrap.php` loads Kirby, which loads our plugin, which then loads our classes.

### Composer Scripts

Running the test command manually each time can be tedious. You can take a look at (link: https://getcomposer.org/doc/articles/scripts.md text: Composer scripts) and use them instead. To do that, simply copy the test command to your plugin's Composer configuration and adjust the paths accordingly:

```json "kirbyplugins/site/plugins/link-field/composer.json"
"scripts": {
  "test": "phpunit --bootstrap ./tests/bootstrap.php --testdox ./tests/suites"
}
```

Then, execute `composer run test` in your shell and the tests should run.

### Using the Panel

To be extra fancy, you can use the Panel to edit your plugin's custom content. Open the plugin's bootstrap script and change it so that the created Kirby object is returned:

```php "link-field/tests/bootstrap.php"
require_once __DIR__ . '/../../../../kirby/bootstrap.php';

return new Kirby([ // <- notice the `return`
  'roots' => [
    'content' => __DIR__ . '/kirby/content',
    'blueprints' => __DIR__ . '/kirby/blueprints'
  ]
]);
```

After that, modify the installation's root `index.php` so that it uses this Kirby object instead:

```php "kirbyplugins/index.php"
require 'kirby/bootstrap.php';

// echo (new Kirby)->render();
echo (require 'site/plugins/link-field/tests/bootstrap.php')->render();
```

You might have noticed that `kirby/bootstrap.php` is required both in `index.php` _and_ in our plugin's `bootstrap.php`. That's OK because our own script uses `require_once` so the Kirby bootstrap is included once.

If you open the panel, you should see your custom plugin content and be able to edit it. Any changes made would be saved to the plugin's `content` folder.

### Other Custom Components

In this guide, we used only custom blueprints and content. However, you can define other custom components for your plugin as well. All you need to do is change (link: docs/reference/system/roots/ text: the roots) in your plugin's `bootstrap.php` accordingly. This means you can have global setups in your Kirby installtion and each plugin can define its own components as needed.
